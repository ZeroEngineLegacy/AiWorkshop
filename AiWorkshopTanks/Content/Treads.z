class Treads : ZilchComponent
{
    [Property]
    var TreadCount : Integer = 20;
    
    [Property]
    var CurrentSpeed : Real = 1.0;
    
    var Treads : Array[Cog] = new Array[Cog]();
    
    var TreadPos : Real = 0.0;
    var WheelPos : Real = 0.0;
    
    function Initialize(init : CogInitializer)
    {
        this.FindTreads();
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function FindTreads()
    {
        var treads = this.Owner.FindChildByName("Treads");
        
        foreach (var tread in treads.Children)
        {
            this.Treads.Add(tread);
        }

        // Set their initial positions
        this.UpdateTreads();
    }
    
    function UpdateTreads()
    {
        var pathObj = this.Space.FindObjectByName("TreadPath");
        for(var i = 0; i < this.TreadCount; ++i)
        {
            var tread = this.Treads.Get(i);
            
            var sample = pathObj.LevelPath.Path.SampleDistance(i as Real * 0.0709 + this.TreadPos);
            tread.Transform.Translation = sample.WorldPoint;
            
            var tangent = sample.WorldTangent;
            var angle = Math.ATan2(tangent.Y, tangent.X);
            tread.Transform.SetEulerAnglesXYZ(0, 0, angle);
        }
    }
    
    function UpdateWheels()
    {
        var wheel = this.Owner.FindChildByName("WheelBack");
        wheel.Transform.SetEulerAnglesXYZ(0, 0, -this.TreadPos * 2.5);
        
        wheel = this.Owner.FindChildByName("WheelFront");
        wheel.Transform.SetEulerAnglesXYZ(0, 0, -this.TreadPos * 3.5);
        
        wheel = this.Owner.FindChildByName("WheelTop");
        wheel.Transform.SetEulerAnglesXYZ(0, 0, -this.TreadPos * 3.0);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        //this.WheelPos -= event.Dt * this.CurrentSpeed * 2.2;
        this.TreadPos += this.CurrentSpeed * event.Dt;
        this.UpdateTreads();
        this.UpdateWheels();
    }
}
