[RunInEditor]
class Renderer2d : ZilchComponent
{
  // If DebugDraw RenderGroups are drawn in edit mode.
  [Property] var EditorDebugDraw : Boolean = true;
  // If DebugDraw RenderGroups are drawn in play mode.
  [Property] var GameDebugDraw : Boolean = true;
  // Color for the background if not using the skybox.
  [Property] var ClearColor : Real4 = Real4(0.0, 0.0, 0.0, 1.0);

  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.RenderTasksUpdate, this.OnRenderTasksUpdate);
  }

  function OnRenderTasksUpdate(event : RenderTasksEvent)
  {
    var viewportSize = event.ViewportSize;
    var final = event.GetFinalTarget(viewportSize, TextureFormat.RGBA8);
    
    var colorTarget = event.GetRenderTarget(viewportSize, TextureFormat.RGBA16f);
    var depthTarget = event.GetRenderTarget(viewportSize, TextureFormat.Depth32);
    
    var clearColor = Math.Pow(this.ClearColor, Real4(2.2.XXX, 1.0));
    event.AddRenderTaskClearTarget(colorTarget, depthTarget, clearColor, 1.0);
    
    // Additive materials
    var alphaSettings = RenderSettings();
    alphaSettings.ColorTarget = colorTarget;
    alphaSettings.DepthTarget = depthTarget;
    alphaSettings.CullMode = CullMode.Disabled;
    alphaSettings.BlendSettings.BlendMode = BlendMode.Separate;
    alphaSettings.BlendSettings.BlendEquation = BlendEquation.Add;
    alphaSettings.BlendSettings.SourceFactor = BlendFactor.SourceAlpha;
    alphaSettings.BlendSettings.DestFactor = BlendFactor.One;
    alphaSettings.BlendSettings.SourceFactorAlpha = BlendFactor.One;
    alphaSettings.BlendSettings.DestFactorAlpha = BlendFactor.One;
    alphaSettings.DepthSettings.DepthMode = DepthMode.Read;
    alphaSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    event.AddRenderTaskRenderPass(alphaSettings, RenderGroup.AdditiveBlend, ColorOutput());
    
    // Bloom
    if (this.Owner.Bloom != null)
      this.Owner.Bloom.AddRenderTasks(event, colorTarget);
    
    // Copy over to final
    var postCopy = CopyTarget();
    postCopy.Texture = colorTarget.Texture;
    event.AddRenderTaskPostProcess(final, postCopy);
    
    // Alpha materials
    alphaSettings.ColorTarget = final;
    alphaSettings.BlendSettings.DestFactor = BlendFactor.InvSourceAlpha;
    event.AddRenderTaskRenderPass(alphaSettings, RenderGroup.AlphaBlend, ColorOutput());
    
    this.DrawDebugObjects(event, final, depthTarget);
  }
  
  function DrawDebugObjects(event : RenderTasksEvent, color : RenderTarget, depth : RenderTarget)
  {
    if (!this.EditorDebugDraw && this.Space.IsEditorMode || !this.GameDebugDraw && !this.Space.IsEditorMode)
      return;
    
    var debugSettings = RenderSettings();
    debugSettings.ColorTarget = color;
    debugSettings.DepthTarget = depth;
    
    debugSettings.CullMode = CullMode.Disabled;
    
    debugSettings.BlendSettings.BlendMode = BlendMode.Separate;
    debugSettings.BlendSettings.BlendEquation = BlendEquation.Add;
    debugSettings.BlendSettings.SourceFactor = BlendFactor.SourceAlpha;
    debugSettings.BlendSettings.DestFactor = BlendFactor.InvSourceAlpha;
    debugSettings.BlendSettings.SourceFactorAlpha = BlendFactor.One;
    debugSettings.BlendSettings.DestFactorAlpha = BlendFactor.One;
    
    debugSettings.DepthSettings.DepthMode = DepthMode.Read;
    debugSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    
    event.AddRenderTaskRenderPass(debugSettings, RenderGroup.DebugDraw, ColorOutput());
    
    debugSettings.DepthSettings.DepthMode = DepthMode.Disabled;
    event.AddRenderTaskRenderPass(debugSettings, RenderGroup.DebugDrawOnTop, ColorOutput());
  }
}
